{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
{\*\generator Riched20 10.0.14393}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\f0\fs22\lang9 R_ Programm _ Johns Hopkins University                 Lakshmi Vaka\par
\par
| Use sample() to drSwirl Lesson - 13,Simulation\par
  \par
  | Please choose a course, or type 0 to exit swirl.\par
1: R Programming\par
2: Take me to the swirl course repository!\par
Selection: 1\par
| Please choose a lesson, or type 0 to return to course menu.\par
 1: Basic Building Blocks      2: Workspace and Files     \par
 3: Sequences of Numbers       4: Vectors                 \par
 5: Missing Values             6: Subsetting Vectors      \par
 7: Matrices and Data Frames   8: Logic                   \par
 9: Functions                 10: lapply and sapply       \par
11: vapply and tapply         12: Looking at Data         \par
13: Simulation                14: Dates and Times         \par
15: Base Graphics             \par
Selection: 13\par
  |                                                          |   0%\par
| One of the great advantages of using a statistical programming\par
| language like R is its vast collection of tools for simulating\par
| random numbers.\par
...\par
  |==                                                        |   3%\par
| This lesson assumes familiarity with a few common probability\par
| distributions, but these topics will only be discussed with\par
| respect to random number generation. Even if you have no prior\par
| experience with these concepts, you should be able to complete\par
| the lesson and understand the main ideas.\par
...\par
  |====                                                      |   6%\par
| The first function we'll use to generate random numbers is\par
| sample(). Use ?sample to pull up the documentation.\par
> ?sample\par
| Perseverance, that's the answer.\par
  |=====                                                     |   9%\par
| Let's simulate rolling four six-sided dice: sample(1:6, 4,\par
| replace = TRUE).\par
> sample(1:6, 4, replace = TRUE)\par
[1] 5 5 2 6\par
| Your dedication is inspiring!\par
  |=======                                                   |  12%\par
| Now repeat the command to see how your result differs. (The\par
| probability of rolling the exact same result is (1/6)^4 =\par
| 0.00077, which is pretty small!)\par
> sample(1:6, 4, replace = TRUE)\par
[1] 3 4 4 3\par
| Nice work!\par
  |=========                                                 |  15%\par
| sample(1:6, 4, replace = TRUE) instructs R to randomly select\par
| four numbers between 1 and 6, WITH replacement. Sampling with\par
| replacement simply means that each number is "replaced" after it\par
| is selected, so that the same number can show up more than once.\par
| This is what we want here, since what you roll on one die\par
| shouldn't affect what you roll on any of the others.\par
...\par
  |===========                                               |  18%\par
| Now sample 10 numbers between 1 and 20, WITHOUT replacement. To\par
| sample without replacement, simply leave off the 'replace'\par
| argument.\par
> sample(1:20,10)\par
 [1]  7  1  6 16 10 18 12  5 11  2\par
| Your dedication is inspiring!\par
  |============                                              |  21%\par
| Since the last command sampled without replacement, no number\par
| appears more than once in the output.\par
...\par
  |==============                                            |  24%\par
| LETTERS is a predefined variable in R containing a vector of all\par
| 26 letters of the English alphabet. Take a look at it now.\par
> LETTERS\par
 [1] "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M" "N" "O" "P"\par
[17] "Q" "R" "S" "T" "U" "V" "W" "X" "Y" "Z"\par
| Excellent job!\par
  |================                                          |  27%\par
| The sample() function can also be used to permute, or rearrange,\par
| the elements of a vector. For example, try sample(LETTERS) to\par
| permute all 26 letters of the English alphabet.\par
> sample(LETTERS)\par
 [1] "Q" "T" "J" "O" "W" "D" "Y" "U" "E" "A" "G" "H" "L" "Z" "P" "S"\par
[17] "K" "C" "I" "R" "B" "F" "X" "V" "M" "N"\par
| You got it right!\par
  |==================                                        |  30%\par
| This is identical to taking a sample of size 26 from LETTERS,\par
| without replacement. When the 'size' argument to sample() is not\par
| specified, R takes a sample equal in size to the vector from\par
| which you are sampling.\par
...\par
  |===================                                       |  33%\par
| Now, suppose we want to simulate 100 flips of an unfair two-sided\par
| coin. This particular coin has a 0.3 probability of landing\par
| 'tails' and a 0.7 probability of landing 'heads'.\par
...\par
  |=====================                                     |  36%\par
| Let the value 0 represent tails and the value 1 represent heads.aw a sample of size 100 from the vector c(0,1),\par
| with replacement. Since the coin is unfair, we must attach\par
| specific probabilities to the values 0 (tails) and 1 (heads) with\par
| a fourth argument, prob = c(0.3, 0.7). Assign the result to a new\par
| variable called flips.\par
> flips<-sample(c(0,1),100,replace=TRUE,prob=c(0.3,0.7))\par
| You are really on a roll!\par
  |=======================                                   |  39%\par
| View the contents of the flips variable.\par
> flips\par
  [1] 1 1 1 1 0 1 1 1 1 1 1 0 1 1 1 0 0 1 0 1 0 1 1 1 0 1 1 1 1 1 1\par
 [32] 0 1 1 1 1 1 0 0 1 1 1 0 1 1 1 0 1 1 1 1 0 1 0 1 0 1 1 1 1 1 1\par
 [63] 1 1 1 1 0 1 1 1 1 1 0 1 0 1 0 1 0 1 0 0 1 1 1 0 0 0 0 0 1 1 1\par
 [94] 1 0 1 1 1 1 0\par
| You're the best!\par
  |=========================                                 |  42%\par
| Since we set the probability of landing heads on any given flip\par
| to be 0.7, we'd expect approximately 70 of our coin flips to have\par
| the value 1. Count the actual number of 1s contained in flips\par
| using the sum() function.\par
> sum(flips)\par
[1] 71\par
| You got it right!\par
  |==========================                                |  45%\par
| A coin flip is a binary outcome (0 or 1) and we are performing\par
| 100 independent trials (coin flips), so we can use rbinom() to\par
| simulate a binomial random variable. Pull up the documentation\par
| for rbinom() using ?rbinom.\par
> ?rbinom\par
| All that hard work is paying off!\par
  |============================                              |  48%\par
| Each probability distribution in R has an r*** function (for\par
| "random"), a d*** function (for "density"), a p*** (for\par
| "probability"), and q*** (for "quantile"). We are most interested\par
| in the r*** functions in this lesson, but I encourage you to\par
| explore the others on your own.\par
...\par
  |==============================                            |  52%\par
| A binomial random variable represents the number of 'successes'\par
| (heads) in a given number of independent 'trials' (coin flips).\par
| Therefore, we can generate a single random variable that\par
| represents the number of heads in 100 flips of our unfair coin\par
| using rbinom(1, size = 100, prob = 0.7). Note that you only\par
| specify the probability of 'success' (heads) and NOT the\par
| probability of 'failure' (tails). Try it now.\par
> rbinom(1, size = 100, prob = 0.7)\par
[1] 76\par
| You are really on a roll!\par
  |================================                          |  55%\par
| Equivalently, if we want to see all of the 0s and 1s, we can\par
| request 100 observations, each of size 1, with success\par
| probability of 0.7. Give it a try, assigning the result to a new\par
| variable called flips2.\par
> flips2<-rbinom(n=100, size = 1, prob = 0.7)\par
| That's correct!\par
  |=================================                         |  58%\par
| View the contents of flips2.\par
> flips2\par
  [1] 0 0 1 0 0 0 0 1 0 1 1 1 1 1 0 1 0 1 0 1 1 1 1 0 1 1 1 1 1 1 1\par
 [32] 0 1 1 1 1 1 1 1 0 0 1 1 0 1 0 1 1 1 1 0 1 0 0 1 1 1 1 1 0 1 0\par
 [63] 1 1 1 0 1 1 0 0 1 1 1 1 0 0 1 1 1 1 1 1 0 0 1 1 1 0 0 1 1 1 0\par
 [94] 1 0 0 1 1 1 1\par
| Keep up the great work!\par
  |===================================                       |  61%\par
| Now use sum() to count the number of 1s (heads) in flips2. It\par
| should be close to 70!\par
> sum(flips2)\par
[1] 67\par
| That's correct!\par
  |=====================================                     |  64%\par
| Similar to rbinom(), we can use R to simulate random numbers from\par
| many other probability distributions. Pull up the documentation\par
| for rnorm() now.\par
> ?rnorm\par
| Keep working like that and you'll get there!\par
  |=======================================                   |  67%\par
| The standard normal distribution has mean 0 and standard\par
| deviation 1. As you can see under the 'Usage' section in the\par
| documentation, the default values for the 'mean' and 'sd'\par
| arguments to rnorm() are 0 and 1, respectively. Thus, rnorm(10)\par
| will generate 10 random numbers from a standard normal\par
| distribution. Give it a try.\par
> rnorm(10)\par
 [1]  1.6794203  0.2139809  2.5742928 -0.6305014 -0.7384053\par
 [6] -0.1994382  0.9871799 -1.4090833  0.8196085  1.2761266\par
| Perseverance, that's the answer.\par
  |========================================                  |  70%\par
| Now do the same, except with a mean of 100 and a standard\par
| deviation of 25.\par
> rnorm(10,mean=100,sd=25)\par
 [1]  75.14305  91.40011  88.22923  76.51028  88.24616  84.71632\par
 [7] 128.47592  56.19216 133.73401  87.42630\par
| Great job!\par
  |==========================================                |  73%\par
| Finally, what if we want to simulate 100 *groups* of random\par
| numbers, each containing 5 values generated from a Poisson\par
| distribution with mean 10? Let's start with one group of 5\par
| numbers, then I'll show you how to repeat the operation 100 times\par
| in a convenient and compact way.\par
...\par
  |============================================              |  76%\par
| Generate 5 random values from a Poisson distribution with mean\par
| 10. Check out the documentation for rpois() if you need help.\par
> ?rpois\par
> rpois(5,10)\par
[1] 17  8 12  2 12\par
| Excellent job!\par
  |==============================================            |  79%\par
| Now use replicate(100, rpois(5, 10)) to perform this operation\par
| 100 times. Store the result in a new variable called my_pois.\par
> my_pois <- replicate(100, rpois(5, 10))\par
| You are really on a roll!\par
  |===============================================           |  82%\par
| Take a look at the contents of my_pois.\par
> my_pois\par
     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12]\par
[1,]    8    8   10   13   11    5    7   10   15    15     9     9\par
[2,]    8   11    7   10    5    6    9    9    9     3    11     7\par
[3,]    5    9   13    7   10   13   10    9   12    12    15    12\par
[4,]    9    7   10   10   15   10   16    8   12     9     7     8\par
[5,]   17   10    9   10    2   10   12   11    7     5     9     9\par
     [,13] [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22]\par
[1,]    15    10     9     9    10    13    11     9     4    10\par
[2,]    10     9    14     8     8    15    12    12    11     9\par
[3,]    14    14    11     7    10    13     9    11     9     7\par
[4,]    11    11    13     4    12     7    14     6     9     9\par
[5,]    12     6    14    11    14     3     6     7    16     9\par
     [,23] [,24] [,25] [,26] [,27] [,28] [,29] [,30] [,31] [,32]\par
[1,]    16     8    10    12     4    12    11     4    13    17\par
[2,]     8    11    13    13    11     4    10    13    12    12\par
[3,]     6    14    14     8    12     7    10    12    13     7\par
[4,]    15     6    11     6    11    10     8    13    10     6\par
[5,]    14     6     8     7     9    15     9     6    12    10\par
     [,33] [,34] [,35] [,36] [,37] [,38] [,39] [,40] [,41] [,42]\par
[1,]     9     9    15    10    11     4     6    14    11     9\par
[2,]     8     7     7    10    12    11     6     8    11    12\par
[3,]     5     9    13     7     8    13    15     5     8     6\par
[4,]     8    16     7     6    15    14    13    11    11    12\par
[5,]    14    12    13    13     6    11    10    12    12    17\par
     [,43] [,44] [,45] [,46] [,47] [,48] [,49] [,50] [,51] [,52]\par
[1,]    12    16    19    14     9    13     8     7     6     8\par
[2,]     8     8     6    12    11     8     7     9     8    15\par
[3,]     8     8    12    11     9     6    12    10     8    15\par
[4,]    14     6     7    11     9    11    10    12     8     7\par
[5,]    10     5    13    11    11     6     6    10    19     9\par
     [,53] [,54] [,55] [,56] [,57] [,58] [,59] [,60] [,61] [,62]\par
[1,]     9    13     8    12     9     7    10     9     7    10\par
[2,]    15    12    11    11    12     5     8    11     9     7\par
[3,]    13     9    13     9    21     8     9     9    13     9\par
[4,]    13     7    12    11    10    14    11    17     8    15\par
[5,]    20    11    13    12    12     5     5     9    12     9\par
     [,63] [,64] [,65] [,66] [,67] [,68] [,69] [,70] [,71] [,72]\par
[1,]    11     9     7     9     9     5     9    11    11     9\par
[2,]    13     7     8    10    11    11     8     9    10     7\par
[3,]     7     7     5    16     9     8     7    11     9    13\par
[4,]     5     7    14     9     8    11    10    13     8    10\par
[5,]    12    11    10    12     9    10     5     8    12     7\par
     [,73] [,74] [,75] [,76] [,77] [,78] [,79] [,80] [,81] [,82]\par
[1,]    14     7     9    11     8     5    17    10     7     8\par
[2,]     9    10     8    11     9    10     8    10    12    10\par
[3,]    10     8     9     5     8    14    11    11    13     6\par
[4,]    15     8    14    10     2    14    11     7    12    11\par
[5,]     7     9     8     9    11     5    14     9     8     8\par
     [,83] [,84] [,85] [,86] [,87] [,88] [,89] [,90] [,91] [,92]\par
[1,]     2    12    11     6    10     8     5     8     9    11\par
[2,]    13    14    12    13     8    10     8     8     8     9\par
[3,]    12     8     9    10    10    19     8    13     9     2\par
[4,]    12     8    16     7    12    14    10    12     6    14\par
[5,]     7     5     7     8     4     7    13     9    11     9\par
     [,93] [,94] [,95] [,96] [,97] [,98] [,99] [,100]\par
[1,]    20     9     8    14     8    13    13     12\par
[2,]    12     6    10    14    16     8    10      7\par
[3,]     3    15    13     9    10    11    17     12\par
[4,]    11     9     8     8     8     8    13      9\par
[5,]     7    11    13     9    13    11    15      8\par
| Keep working like that and you'll get there!\par
  |=================================================         |  85%\par
| replicate() created a matrix, each column of which contains 5\par
| random numbers generated from a Poisson distribution with mean\par
| 10. Now we can find the mean of each column in my_pois using the\par
| colMeans() function. Store the result in a variable called cm.\par
> cm <- colMeans(my_pois)\par
| Perseverance, that's the answer.\par
  |===================================================       |  88%\par
| And let's take a look at the distribution of our column means by\par
| plotting a histogram with hist(cm).\par
> hist(cm)\par
| You are doing so well!\par
  |=====================================================     |  91%\par
| Looks like our column means are almost normally distributed,\par
| right? That's the Central Limit Theorem at work, but that's a\par
| lesson for another day!\par
...\par
  |======================================================    |  94%\par
| All of the standard probability distributions are built into R,\par
| including exponential (rexp()), chi-squared (rchisq()), gamma\par
| (rgamma()), .... Well, you see the pattern.\par
...\par
  |========================================================  |  97%\par
| Simulation is practically a field of its own and we've only\par
| skimmed the surface of what's possible. I encourage you to\par
| explore these and other functions further on your own.\par
...\par
  |==========================================================| 100%\par
  \par
}
 