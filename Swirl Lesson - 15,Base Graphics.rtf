{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
{\colortbl ;\red0\green0\blue255;}
{\*\generator Riched20 10.0.14393}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\f0\fs22\lang9\par
R _ Programm, Johns Hopkins University,       Lakshmi Vaka\par
\par
Swirl Lesson - 15,Base Graphics\par
  \par
  | Please choose a course, or type 0 to exit swirl.\par
1: R Programming\par
2: Take me to the swirl course repository!\par
Selection: 1\par
| Please choose a lesson, or type 0 to return to course menu.\par
 1: Basic Building Blocks      2: Workspace and Files     \par
 3: Sequences of Numbers       4: Vectors                 \par
 5: Missing Values             6: Subsetting Vectors      \par
 7: Matrices and Data Frames   8: Logic                   \par
 9: Functions                 10: lapply and sapply       \par
11: vapply and tapply         12: Looking at Data         \par
13: Simulation                14: Dates and Times         \par
15: Base Graphics             \par
Selection: 15\par
  |                                                          |   0%\par
| One of the greatest strengths of R, relative to other programming\par
| languages, is the ease with which we can create\par
| publication-quality graphics. In this lesson, you'll learn about\par
| base graphics in R.\par
...\par
  |=                                                         |   2%\par
| We do not cover the more advanced portions of graphics in R in\par
| this lesson. These include lattice, ggplot2 and ggvis.\par
...\par
  |===                                                       |   4%\par
| There is a school of thought that this approach is backwards,\par
| that we should teach ggplot2 first. See\par
| {{\field{\*\fldinst{HYPERLINK http://varianceexplained.org/r/teach_ggplot2_to_beginners/ }}{\fldrslt{http://varianceexplained.org/r/teach_ggplot2_to_beginners/\ul0\cf0}}}}\f0\fs22  for an\par
| outline of this view.\par
...\par
  |====                                                      |   7%\par
| Load the included data frame cars with data(cars).\par
> data(cars)\par
| That's the answer I was looking for.\par
  |=====                                                     |   9%\par
| To fix ideas, we will work with simple data frames. Our main goal\par
| is to introduce various plotting functions and their arguments.\par
| All the output would look more interesting with larger, more\par
| complex data sets.\par
...\par
  |======                                                    |  11%\par
| Pull up the help page for cars.\par
> ?cars\par
| All that hard work is paying off!\par
  |========                                                  |  13%\par
| As you can see in the help page, the cars data set has only two\par
| variables: speed and stopping distance. Note that the data is\par
| from the 1920s.\par
...\par
  |=========                                                 |  15%\par
| Run head() on the cars data.\par
> head(cars)\par
  speed dist\par
1     4    2\par
2     4   10\par
3     7    4\par
4     7   22\par
5     8   16\par
6     9   10\par
| All that practice is paying off!\par
  |==========                                                |  17%\par
| Before plotting, it is always a good idea to get a sense of the\par
| data. Key R commands for doing so include, dim(), names(),\par
| head(), tail() and summary().\par
...\par
  |===========                                               |  20%\par
| Run the plot() command on the cars data frame.\par
> plot(cars)\par
| Nice work!\par
  |=============                                             |  22%\par
| As always, R tries very hard to give you something sensible given\par
| the information that you have provided to it. First, R notes that\par
| the data frame you have given it has just two columns, so it\par
| assumes that you want to plot one column versus the other.\par
...\par
  |==============                                            |  24%\par
| Second, since we do not provide labels for either axis, R uses\par
| the names of the columns. Third, it creates axis tick marks at\par
| nice round numbers and labels them accordingly. Fourth, it uses\par
| the other defaults supplied in plot().\par
...\par
  |===============                                           |  26%\par
| We will now spend some time exploring plot, but many of the\par
| topics covered here will apply to most other R graphics\par
| functions. Note that 'plot' is short for scatterplot.\par
...\par
  |================                                          |  28%\par
| Look up the help page for plot().\par
> ?plot\par
| Keep working like that and you'll get there!\par
  |==================                                        |  30%\par
| The help page for plot() highlights the different arguments that\par
| the function can take. The two most important are x and y, the\par
| variables that will be plotted. For the next set of questions,\par
| include the argument names in your answers. That is, do not type\par
| plot(cars$speed, cars$dist), although that will work. Instead,\par
| use plot(x = cars$speed, y = cars$dist).\par
...\par
  |===================                                       |  33%\par
| Use plot() command to show speed on the x-axis and dist on the\par
| y-axis from the cars data frame. Use the form of the plot command\par
| in which vectors are explicitly passed in as arguments for x and\par
| y.\par
> plot(x = cars$speed, y = cars$dist)\par
| All that practice is paying off!\par
  |====================                                      |  35%\par
| Note that this produces a slightly different answer than\par
| plot(cars). In this case, R is not sure what you want to use as\par
| the labels on the axes, so it just uses the arguments which you\par
| pass in, data frame name and dollar signs included.\par
...\par
  |=====================                                     |  37%\par
| Note that there are other ways to call the plot command, i.e.,\par
| using the "formula" interface. For example, we get a similar plot\par
| to the above with plot(dist ~ speed, cars). However, we will wait\par
| till later in the lesson before using the formula interface.\par
...\par
  |=======================                                   |  39%\par
| Use plot() command to show dist on the x-axis and speed on the\par
| y-axis from the cars data frame. This is the opposite of what we\par
| did above.\par
> plot(x = cars$dist, y = cars$speed)\par
| Keep working like that and you'll get there!\par
  |========================                                  |  41%\par
| It probably makes more sense for speed to go on the x-axis since\par
| stopping distance is a function of speed more than the other way\par
| around. So, for the rest of the questions in this portion of the\par
| lesson, always assign the arguments accordingly.\par
...\par
  |=========================                                 |  43%\par
| In fact, you can assume that the answers to the next few\par
| questions are all of the form plot(x = cars$speed, y = cars$dist,\par
| ...) but with various arguments used in place of the ...\par
...\par
  |==========================                                |  46%\par
| Recreate the plot with the label of the x-axis set to "Speed".\par
> plot(x = cars$speed, y = cars$dist, xlab="Speed")\par
| Great job!\par
  |============================                              |  48%\par
| Recreate the plot with the label of the y-axis set to "Stopping\par
| Distance".\par
> plot(x = cars$speed, y = cars$dist, ylab="Stopping Distance")\par
| You are really on a roll!\par
  |=============================                             |  50%\par
| Recreate the plot with "Speed" and "Stopping Distance" as axis\par
| labels.\par
> plot(x = cars$speed, y = cars$dist, xlab="Speed", ylab="Stopping Distance")\par
| Excellent job!\par
  |==============================                            |  52%\par
| The reason that plots(cars) worked at the beginning of the lesson\par
| was that R was smart enough to know that the first element (i.e.,\par
| the first column) in cars should be assigned to the x argument\par
| and the second element to the y argument. To save on typing, the\par
| next set of answers will all be of the form, plot(cars, ...) with\par
| various arguments added.\par
...\par
  |================================                          |  54%\par
| For each question, we will only want one additional argument at a\par
| time. Of course, you can pass in more than one argument when\par
| doing a real project.\par
...\par
  |=================================                         |  57%\par
| Plot cars with a main title of "My Plot". Note that the argument\par
| for the main title is "main" not "title".\par
> plot(cars, main ="My Plot")\par
| All that practice is paying off!\par
  |==================================                        |  59%\par
| Plot cars with a sub title of "My Plot Subtitle".\par
> plot(cars, sub ="My Plot Subtitle")\par
| All that hard work is paying off!\par
  |===================================                       |  61%\par
| The plot help page (?plot) only covers a small number of the many\par
| arguments that can be passed in to plot() and to other graphical\par
| functions. To begin to explore the many other options, look at\par
| ?par. Let's look at some of the more commonly used ones. Continue\par
| using plot(cars, ...) as the base answer to these questions.\par
...\par
  |=====================================                     |  63%\par
| Plot cars so that the plotted points are colored red. (Use col =\par
| 2 to achieve this effect.)\par
> plot(cars, col =2)\par
| Keep up the great work!\par
  |======================================                    |  65%\par
| Plot cars while limiting the x-axis to 10 through 15.  (Use xlim\par
| = c(10, 15) to achieve this effect.)\par
> plot(cars, xlim=c(10,15))\par
| That's a job well done!\par
  |=======================================                   |  67%\par
| You can also change the shape of the symbols in the plot. The\par
| help page for points (?points) provides the details.\par
...\par
  |========================================                  |  70%\par
| Plot cars using triangles.  (Use pch = 2 to achieve this effect.)\par
> plot(cars, pch=2)\par
| All that hard work is paying off!\par
  |==========================================                |  72%\par
| Arguments like "col" and "pch" may not seem very intuitive. And\par
| that is because they aren't! So, many/most people use more modern\par
| packages, like ggplot2, for creating their graphics in R.\par
...\par
  |===========================================               |  74%\par
| It is, however, useful to have an introduction to base graphics\par
| because many of the idioms in lattice and ggplot2 are modeled on\par
| them.\par
...\par
  |============================================              |  76%\par
| Let's now look at some other functions in base graphics that may\par
| be useful, starting with boxplots.\par
...\par
  |=============================================             |  78%\par
| Load the mtcars data frame.\par
> data(mtcars)\par
| Perseverance, that's the answer.\par
  |===============================================           |  80%\par
| Anytime that you load up a new data frame, you should explore it\par
| before using it. In the middle of a swirl lesson, just type\par
| play(). This temporarily suspends the lesson (without losing the\par
| work you have already done) and allows you to issue commands like\par
| dim(mtcars) and head(mtcars). Once you are done examining the\par
| data, just type nxt() and the lesson will pick up where it left\par
| off.\par
...\par
  |================================================          |  83%\par
| Look up the help page for boxplot().\par
> ?boxplot\par
| You are really on a roll!\par
  |=================================================         |  85%\par
| Instead of adding data columns directly as input arguments, as we\par
| did with plot(), it is often handy to pass in the entire data\par
| frame. This is what the "data" argument in boxplot() allows.\par
...\par
  |==================================================        |  87%\par
| boxplot(), like many R functions, also takes a "formula"\par
| argument, generally an expression with a tilde ("~") which\par
| indicates the relationship between the input variables. This\par
| allows you to enter something like mpg ~ cyl to plot the\par
| relationship between cyl (number of cylinders) on the x-axis and\par
| mpg (miles per gallon) on the y-axis.\par
...\par
  |====================================================      |  89%\par
| Use boxplot() with formula = mpg ~ cyl and data = mtcars to\par
| create a box plot.\par
> boxplot(formula=mpg~cyl,data=mtcars)\par
| You are really on a roll!\par
  |=====================================================     |  91%\par
| The plot shows that mpg is much lower for cars with more\par
| cylinders. Note that we can use the same set of arguments that we\par
| explored with plot() above to add axis labels, titles and so on.\par
...\par
  |======================================================    |  93%\par
| When looking at a single variable, histograms are a useful tool.\par
| hist() is the associated R function. Like plot(), hist() is best\par
| used by just passing in a single vector.\par
...\par
  |=======================================================   |  96%\par
| Use hist() with the vector mtcars$mpg to create a histogram.\par
> hist(mtcars$mpg)\par
| All that hard work is paying off!\par
  |========================================================= |  98%\par
| In this lesson, you learned how to work with base graphics in R.\par
| The best place to go from here is to study the ggplot2 package.\par
| If you want to explore other elements of base graphics, then this\par
| web page ({{\field{\*\fldinst{HYPERLINK http://www.ling.upenn.edu/~joseff/rstudy/week4.html }}{\fldrslt{http://www.ling.upenn.edu/~joseff/rstudy/week4.html\ul0\cf0}}}}\f0\fs22 )\par
| provides a useful overview.\par
...\par
  |==========================================================| 100%\par
}
 